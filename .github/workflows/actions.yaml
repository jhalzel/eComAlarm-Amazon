name: run main.py

on:
  schedule:
    - cron: '0,10,20,30,40,50 * * * *' # run exactly every 10 minutes
  push:
    paths:
      - 'src/trial.py'
      - 'src/data.json' # this file changes when data is updated
      - 'src/config.json' # this file changes when config is updated
  repository_dispatch:
    types: [resume_schedule]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:

      - name: checkout repo content
        uses: actions/checkout@v2 # checkout the repository content to GitHub runner
        with: 
          node-version: '16.15.0'

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # install the python version needed

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Save Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: install python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
          
      - name: Access Deployed Flask App
        run: |
          # Send an HTTP request to your deployed Flask app.
          response=$(curl -s -o /dev/null -w "%{http_code}" https://amazon-ecom-alarm.onrender.com)

          # Check the response code.
          if [ "$response" == "200" ]; then
            echo "Flask App is accessible."
          else
            echo "Flask App is not accessible. Response code: $response"
            exit 1
          fi     
          
      - name: execute py script # run main.py
        id: execute_script
        run: python src/script.py
        env:
          SOME_SECRET: ${{ secrets.SOME_SECRET }}
          # Amazon credentials
          SP_API_REFRESH_TOKEN: ${{ secrets.SP_API_REFRESH_TOKEN }}
          LWA_APP_ID: ${{ secrets.LWA_APP_ID }}
          LWA_CLIENT_SECRET: ${{ secrets.LWA_CLIENT_SECRET }}
          SP_API_ACCESS_KEY: ${{ secrets.SP_API_ACCESS_KEY }}
          SP_API_SECRET_KEY: ${{ secrets.SP_API_SECRET_KEY }}
          SP_API_ROLE_ARN: ${{ secrets.SP_API_ROLE_ARN }}
          # Gmail credentials
          GMAIL_USERNAME: ${{ secrets.GMAIL_USER }}
          GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}

      - name: Fetch updated data.json from server
        run: |
          # Replacing the local file with the file on the server where data.json is updated
          curl -o src/data.json https://amazon-ecom-alarm.onrender.com/get_data


      - name: Commit and Push data.json
        run: |
          git config --local user.email "jeremy123jeremy@gmail.com"
          git config --local user.name "jhalzel"
          git add src/data.json
          git commit -m "Update data.json"
          git push origin rainbow-branch

      - name: Save data.json to Cache
        run: |
          cp src/data.json ${{ runner.workspace }}/data.json
        
      # Cache the 'data.json' file across workflow runs
      - name: Cache data.json
        uses: actions/cache@v2
        with:
          path: ${{ runner.workspace }}/data.json
          key: data-json-${{ runner.os }}

          